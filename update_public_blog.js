const fs = require('fs');
const path = 'apps/api/src/modules/catalog/public-blog.controller.ts';
let src = fs.readFileSync(path, 'utf8');
const helper = `function shapePublicComment(comment: any): any {\n  if (!comment) return null;\n  const replies = Array.isArray(comment.replies)\n    ? comment.replies.map((entry: any) => shapePublicComment(entry)).filter((entry: any) => Boolean(entry))\n    : [];\n  return {\n    id: comment.id,\n    parentId: comment.parentId ?? null,\n    content: comment.content,\n    status: comment.status,\n    languageCode: comment.languageCode ?? null,\n    createdAt: comment.createdAt,\n    updatedAt: comment.updatedAt,\n    author: comment.author\n      ? { id: comment.author.id, name: comment.author.name, email: comment.author.email }\n      : null,\n    authorName: comment.author?.name ?? comment.authorName ?? null,\n    authorEmail: comment.author?.email ?? comment.authorEmail ?? null,\n    moderationTags: Array.isArray(comment.moderationTags) ? comment.moderationTags : [],\n    autoFlagged: Boolean(comment.autoFlagged),\n    toxicityScore: comment.toxicityScore ?? null,\n    spamScore: comment.spamScore ?? null,\n    replies\n  };\n}\n\n`;
const newTransform = `function transformPublicPostForResponse(post: any, language?: string) {\n  const availableLanguages = mapAvailableLanguages(post?.translations);\n  const normalizedLanguage = typeof language === 'string' ? language.trim().toLowerCase() : '';\n  const translation = normalizedLanguage\n    ? post?.translations?.find((entry: any) => entry?.language?.toLowerCase() === normalizedLanguage)\n    : null;\n\n  const summary = translation?.aiSummary || translation?.excerpt || post?.aiSummary || post?.summary || post?.excerpt || null;\n  const activeLanguage = translation ? normalizedLanguage : 'default';\n\n  const normalizedTranslations = availableLanguages.map((languageCode) => {\n    const translationEntry = post?.translations?.find((entry: any) => entry?.language?.toLowerCase() === languageCode);\n    return {\n      language: languageCode,\n      title: translationEntry?.title ?? null,\n      excerpt: translationEntry?.excerpt ?? null,\n      aiSummary: translationEntry?.aiSummary ?? null\n    };\n  });\n\n  const shapedComments = Array.isArray(post?.comments)\n    ? post.comments\n        .map((entry: any) => shapePublicComment(entry))\n        .filter((entry: any) => Boolean(entry))\n    : [];\n\n  const countReplies = (items: any[]): number =>\n    items.reduce((total, item) => total + 1 + countReplies(item?.replies ?? []), 0);\n\n  const commentCount =\n    typeof post?._count?.comments === 'number'\n      ? post._count.comments\n      : countReplies(shapedComments);\n\n  return {\n    id: post?.id,\n    title: translation?.title || post?.title,\n    slug: post?.slug,\n    excerpt: translation?.excerpt || post?.excerpt,\n    summary,\n    content: translation?.content || post?.content,\n    coverImage: post?.coverImage,\n    status: post?.status,\n    allowComments: post?.allowComments,\n    featured: post?.featured,\n    tags: post?.tags,\n    readingMinutes: post?.readingMinutes,\n    publishedAt: post?.publishedAt,\n    category: post?.category,\n    author: post?.author,\n    comments: shapedComments,\n    commentCount,\n    availableLanguages,\n    translations: normalizedTranslations,\n    activeLanguage,\n    aiSummary: summary\n  };\n}`;
if (!src.includes('function shapePublicComment')) {
  src = src.replace('function transformPublicPostForResponse', `${helper}function transformPublicPostForResponse`);
}
src = src.replace(/function transformPublicPostForResponse[\s\S]*?return \{[\s\S]*?aiSummary: summary\n  \};\n\}/, newTransform);
fs.writeFileSync(path, src);
